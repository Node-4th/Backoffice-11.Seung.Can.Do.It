generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int         @id @default(autoincrement()) @map("userId")
  classId      Int?        @map("classId")
  email        String      @unique @map("email") @db.VarChar(255)
  password     String      @map("password") @db.VarChar(255)
  name         String      @map("name") @db.VarChar(255)
  profileImage String?     @map("profileImage") @db.VarChar(255)
  role         Role
  feedbacks    Feedbacks[]
  tasks        Tasks[]
  teams        Teams[]
  class        Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId], map: "Users_classId_fkey")
  @@map("Users")
}

model Class {
  id    Int     @id @default(autoincrement()) @map("classId")
  name  String  @map("name") @db.VarChar(255)
  users Users[]

  @@map("Class")
}

model Teams {
  id        Int      @id @default(autoincrement()) @map("teamId")
  userId    Int      @map("userId")
  name      String   @map("name") @db.VarChar(255)
  projectId Int      @map("projectId")
  tasks     Tasks[]
  projects  Projects @relation(fields: [projectId], references: [id])
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "Teams_projectId_fkey")
  @@index([userId], map: "Teams_userId_fkey")
  @@map("Teams")
}

model Projects {
  id        Int      @id @default(autoincrement()) @map("projectId")
  title     String   @map("title") @db.VarChar(255)
  deadline  DateTime @map("deadline")
  createdAt DateTime @default(now()) @map("createdAt")
  category  Category
  tasks     Tasks[]
  teams     Teams[]

  @@map("Projects")
}

model Tasks {
  id        Int         @id @default(autoincrement()) @map("taskId")
  userId    Int?        @map("userId")
  teamId    Int?        @map("teamId")
  projectId Int         @map("projectId")
  content   String      @map("content") @db.VarChar(255)
  submitUrl String      @map("submitUrl") @db.VarChar(255)
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")
  Feedbacks Feedbacks[]
  projects  Projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teams     Teams?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  users     Users?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "Tasks_projectId_fkey")
  @@index([teamId], map: "Tasks_teamId_fkey")
  @@index([userId], map: "Tasks_userId_fkey")
  @@map("Tasks")
}

model Feedbacks {
  id        Int      @id @default(autoincrement()) @map("feedbackId")
  taskId    Int      @map("taskId")
  title     String   @map("title") @db.VarChar(255)
  content   String   @map("content") @db.VarChar(255)
  rating    Rating
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  userId    Int      @map("userId")
  task      Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId], map: "Feedbacks_taskId_fkey")
  @@index([userId], map: "Feedbacks_userId_fkey")
  @@map("Feedbacks")
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum Category {
  TIL
  PERSONAL_PROJECT
  TEAM_PROJECT
}

enum Rating {
  RATING_1
  RATING_2
  RATING_3
  RATING_4
  RATING_5
  RATING_6
  RATING_7
  RATING_8
  RATING_9
  RATING_10
}
